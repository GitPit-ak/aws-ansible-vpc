- hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: import vpc variable
      include_vars: vpc_vars

    - name: create devops vpc
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        dns_hostnames: true
        dns_support: true
        region: "{{region}}"
        state: "{{state}}"
        tenancy: default
      register: vpc_out

    # - debug:
    #     var: vpc_out

    - name: create Public subnet 1 for zone1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpc_out.vpc.id}}"
        cidr: "{{PubSub1Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        map_public: yes
        resource_tags:
          Name: devops-pubsub1
      register: pubsub1_out

    - name: create Public subnet 2 for zone1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpc_out.vpc.id}}"
        cidr: "{{PubSub2Cidr}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        map_public: yes
        resource_tags:
          Name: devops-pubsub2
      register: pubsub2_out

    - name: create private subnet 1 for zone1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpc_out.vpc.id}}"
        cidr: "{{PrivSub1Cidr}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        resource_tags:
          Name: devops-privsub1
      register: pubpriv1_out

    - name: create private subnet 2 for zone1
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{vpc_out.vpc.id}}"
        cidr: "{{PrivSub2Cidr}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        resource_tags:
          Name: devops-privsub2
      register: pubpriv2_out

    - name: Internet Gatewat setup
      ec2_vpc_igw:
        vpc_id: "{{vpc_out.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: vprofile-igw
      register: igw_out

    # - debug:
    #     var: igw_out

    - name: setup public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc_out.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        tags:
          Name: Vprofile-pubRT
        subnets:
          - "{{pubsub1_out.subnet.id}}"
          - "{{pubsub2_out.subnet.id}}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out.gateway_id}}"
      register: pubRT_out

    # - name: Create NAT gateway 
    #   ec2_vpc_nat_gateway:
    #     state: "{{state}}"
    #     subnet_id: "{{pubsub1_out.subnet.id}}"
    #     wait: yes
    #     region: "{{region}}"
    #     if_exist_do_not_create: true
    #   register: NATGW_out

    - name: setup private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpc_out.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        tags:
          Name: Vprofile-PrivRT
        subnets:
          - "{{pubpriv1_out.subnet.id}}"
          - "{{pubpriv2_out.subnet.id}}"
        # routes:
          # - dest: 0.0.0.0/0
          #   gateway_id: "{{ NATGW_out.nat_gateway_id }}"
      register: privRT_out

    - name: security group for frontend-sg
      amazon.aws.ec2_security_group:
        name: frontend-sg
        description: frontend-sg for web servers
        vpc_id: "{{vpc_out.vpc.id}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        tags:
          Name: frontend-sg
      register: front_sg_out

    # - debug:
    #     var: front_sg_out

    - name: security group for backend-sg
      amazon.aws.ec2_security_group:
        name: backend-sg
        description: backend-sg for web servers
        vpc_id: "{{vpc_out.vpc.id}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{front_sg_out.group_id}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{front_sg_out.group_id}}"

        tags:
          Name: backend-sg
      register: back_sg_out

    # - debug:
    #     var: back_sg_out


    - name: create a new EC2 key pair
      amazon.aws.ec2_key:
        name: devops-key
        force: true
        region: "{{region}}"
      register: key_out

    # - debug:
    #     var: key_out

    - name: saving the priv key
      copy:
        content: "{{key_out.key.private_key}}"
        dest: ./devops-key.pem
        mode: 0600
      when: key_out.changed == true


    - name: create ec2 for bastion host
      amazon.aws.ec2_instance:
        name: "{{bastion_name}}"
        key_name: "devops-key"
        region: "{{region}}"
        vpc_subnet_id: "{{pubsub1_out.subnet.id}}"
        instance_type: t2.micro
        security_group: "{{front_sg_out.group_id}}"
        network:
          # assign_public_ip: true
          delete_on_termination: true
        image_id: "{{bastion_ami}}"
        tags:
          project: devops
          Name: bastion_host
        wait: true
        wait_timeout: 300
      register: bastion_ec2_out

    - name: create ec2 for web01 server
      amazon.aws.ec2_instance:
        name: web01
        key_name: "devops-key"
        region: "{{region}}"
        vpc_subnet_id: "{{pubpriv1_out.subnet.id}}"
        instance_type: t2.micro
        security_group: "{{back_sg_out.group_id}}"
        network:
          # assign_public_ip: true
          delete_on_termination: true
        image_id: "{{bastion_ami}}"
        tags:
          project: devops
          owner: asif
        wait: true
        wait_timeout: 300
      register: web01_ec2_out


    - name: create ec2 for web02 server
      amazon.aws.ec2_instance:
        name: web02
        key_name: "devops-key"
        region: "{{region}}"
        vpc_subnet_id: "{{pubpriv2_out.subnet.id}}"
        instance_type: t2.micro
        security_group: "{{back_sg_out.group_id}}"
        network:
          # assign_public_ip: true
          delete_on_termination: true
        image_id: "{{bastion_ami}}"
        tags:
          project: devops
          owner: asif
        wait: true
        wait_timeout: 300
      register: web02_ec2_out


    - debug:
        var: web02_ec2_out.instance_id


    - debug:
        var: web02_ec2_out

    # - name: Setting host facts from variable
    #   ansible.builtin.set_fact:
    #     vpcid: "{{vpc_out.vpc.id}}"
    #     pubsub1id: "{{pubsub1_out.subnet.id}}"
    #     pubsub2id: "{{pubsub2_out.subnet.id}}"
    #     privsub1id: "{{pubpriv1_out.subnet.id}}"
    #     privsub2id: "{{pubpriv2_out.subnet.id}}"
    #     igwid: "{{igw_out.gateway_id}}"
    #     pubRTid: "{{pubRT_out.route_table.id}}"
    #     privRTid: "{{privRT_out.route_table.id}}"
    #     frontsgid: "{{front_sg_out.group_id}}"
    #     backsgid: "{{back_sg_out.group_id}}"
    #     web01_ec2_out_id: "{{web01_ec2_out.instance_id }}"
    #     web02_ec2_out_id: "{{web01_ec2_out.instance_id }}"

    # - name: Create variable file from vpc output
    #   copy:
    #     content: |
    #       vpcid: "{{vpc_out.vpc.id}}"
    #       pubsub1id: "{{pubsub1_out.subnet.id}}"
    #       pubsub2id: "{{pubsub2_out.subnet.id}}"
    #       privsub1id: "{{pubpriv1_out.subnet.id}}"
    #       privsub2id: "{{pubpriv2_out.subnet.id}}"
    #       igwid: "{{igw_out.gateway_id}}"
    #       pubRTid: "{{pubRT_out.route_table.id}}"
    #       privRTid: "{{privRT_out.route_table.id}}"
    #       frontsgid: "{{front_sg_out.group_id}}"
    #       backsgid: "{{back_sg_out.group_id}}"
    #       web01_ec2_out_id: "{{web01_ec2_out.instance_id }}"
    #       web02_ec2_out_id: "{{web01_ec2_out.instance_id }}"
    #     dest: vars/output_vars